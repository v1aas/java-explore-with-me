{
	"info": {
		"_postman_id": "4c8dda3b-626d-453c-a8b5-8e4515ae12ad",
		"name": "Diplom",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26310000",
		"_collection_link": "https://universal-crater-21935.postman.co/workspace/Team-Workspace~2be55f36-a6a7-4f53-85cb-13010c967c19/collection/26310000-4c8dda3b-626d-453c-a8b5-8e4515ae12ad?action=share&source=collection_link&creator=26310000"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "Admin user 1 create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"The id should be equal to 1\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.id).to.equal(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Name should be equal to 'User #1'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.name).to.equal(\"User #1\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is equal to 'user@user.com'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.email).to.equal(\"user@user.com\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"User #1\",\r\n    \"email\": \"user@user.com\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/admin/users",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin user create fail duplicate email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.expect(pm.response.code).to.be.oneOf([409, 500])"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"User #2\",\r\n    \"email\": \"user@user.com\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/admin/users",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin user create fail no email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.response.to.be.badRequest;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"User #3\",\r\n    \"email\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/admin/users",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin user create fail invalid email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.response.to.be.badRequest;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"User #2\",\r\n    \"email\": \"mailmailmail\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/admin/users",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin user 2 create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"The id field is present and has the value of 2\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.id).to.exist.and.to.equal(3);",
									"});",
									"",
									"",
									"pm.test(\"Name field is present and has the value of 'User #2'\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.name).to.exist.and.to.equal(\"User #2\");",
									"});",
									"",
									"",
									"pm.test(\"Email field is present and has the value of 'user2@user.com'\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.email).to.exist.and.to.equal(\"user2@user.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"User #2\",\r\n    \"email\": \"user2@user.com\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/admin/users",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to check the response status code is 200\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test to check the response length is 1\r",
									"pm.test(\"Response has length of 1\", function () {\r",
									"    pm.expect(pm.response.json().length).to.equal(1);\r",
									"});\r",
									"\r",
									"// Test to check the first object in the response is as expected\r",
									"pm.test(\"First object in the response matches the expected object\", function () {\r",
									"    var expectedObject = {\r",
									"        \"id\": 1,\r",
									"        \"name\": \"User #1\",\r",
									"        \"email\": \"user@user.com\"\r",
									"    };\r",
									"    pm.expect(pm.response.json()[0]).to.eql(expectedObject);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localhost}}/admin/users?ids=1",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"admin",
								"users"
							],
							"query": [
								{
									"key": "ids",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin user 3 create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"The id field is present and has the value of 2\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.id).to.exist.and.to.equal(4);",
									"});",
									"",
									"",
									"pm.test(\"Name field is present and has the value of 'User #3'\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.name).to.exist.and.to.equal(\"User #3\");",
									"});",
									"",
									"",
									"pm.test(\"Email field is present and has the value of 'user3@user.com'\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.email).to.exist.and.to.equal(\"user3@user.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"User #3\",\r\n    \"email\": \"user3@user.com\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/admin/users",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get 1,3 users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array with length of 2\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf(2);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{localhost}}/admin/users?ids=1&ids=3",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"admin",
								"users"
							],
							"query": [
								{
									"key": "ids",
									"value": "1"
								},
								{
									"key": "ids",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin user 3 delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {",
									"    pm.expect(pm.response.code).to.equal(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{localhost}}/admin/users/4",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"admin",
								"users",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array with length of 2\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf(2);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{localhost}}/admin/users",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "categories",
			"item": [
				{
					"name": "Admin create category 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Активный отдых\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/admin/categories",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin create duplicate name category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.expect(pm.response.code).to.be.oneOf([409, 500])"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Активный отдых\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/admin/categories",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin create category 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Концерты\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/admin/categories",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin create category 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Кино\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/admin/categories",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin patch category 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Квесты\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/admin/categories/4",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"admin",
								"categories",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array with length of 3\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf(3);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{localhost}}/categories",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin delete category 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {",
									"    pm.expect(pm.response.code).to.equal(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{localhost}}/admin/categories/4",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"admin",
								"categories",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get 3 category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{localhost}}/categories/4",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"categories",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get 1 category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Retrieve the saved \"name\" value from the variable\r",
									"pm.test(\"Validate response against saved 'name' value\", function () {\r",
									"    var responseBody = pm.response.json();\r",
									"    var responseName = responseBody.name;\r",
									"\r",
									"    pm.expect(responseName).to.equal(\"Активный отдых\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{localhost}}/categories/1",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"categories",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "events",
			"item": [
				{
					"name": "Create 1 event for 1 user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка статуса ответа",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Проверка структуры ответа",
									"let jsonResponse = pm.response.json();",
									"",
									"pm.test(\"Response has all required fields\", function () {",
									"    pm.expect(jsonResponse).to.have.property(\"id\");",
									"    pm.expect(jsonResponse).to.have.property(\"annotation\");",
									"    pm.expect(jsonResponse).to.have.property(\"category\");",
									"    pm.expect(jsonResponse).to.have.property(\"confirmedRequests\");",
									"    pm.expect(jsonResponse).to.have.property(\"createdOn\");",
									"    pm.expect(jsonResponse).to.have.property(\"description\");",
									"    pm.expect(jsonResponse).to.have.property(\"eventDate\");",
									"    pm.expect(jsonResponse).to.have.property(\"initiator\");",
									"    pm.expect(jsonResponse).to.have.property(\"location\");",
									"    pm.expect(jsonResponse).to.have.property(\"paid\");",
									"    pm.expect(jsonResponse).to.have.property(\"participantLimit\");",
									"    pm.expect(jsonResponse).to.have.property(\"publishedOn\");",
									"    pm.expect(jsonResponse).to.have.property(\"requestModeration\");",
									"    pm.expect(jsonResponse).to.have.property(\"state\");",
									"    pm.expect(jsonResponse).to.have.property(\"title\");",
									"    pm.expect(jsonResponse).to.have.property(\"views\");",
									"});",
									"",
									"// Проверка значений некоторых полей",
									"pm.test(\"Check specific field values\", function () {",
									"    pm.expect(jsonResponse.id).to.eql(1);",
									"    pm.expect(jsonResponse.annotation).to.eql(\"Сплав на байдарках похож на полет.\");",
									"    pm.expect(jsonResponse.category.id).to.eql(1);",
									"    pm.expect(jsonResponse.category.name).to.eql(\"Активный отдых\");",
									"    pm.expect(jsonResponse.initiator.id).to.eql(1);",
									"    pm.expect(jsonResponse.initiator.name).to.eql(\"User #1\");",
									"    pm.expect(jsonResponse.initiator.email).to.eql(\"user@user.com\");",
									"    pm.expect(jsonResponse.location.lat).to.eql(55.754166);",
									"    pm.expect(jsonResponse.location.lon).to.eql(37.62);",
									"    pm.expect(jsonResponse.paid).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\r\n  \"category\": 1,\r\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n  \"eventDate\": \"2024-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Сплав на байдарках\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/users/1/events",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"users",
								"1",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 2 event for 1 user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"let jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has all required fields\", function () {\r",
									"    pm.expect(jsonResponse).to.have.property(\"annotation\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"category\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"description\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"eventDate\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"location\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"paid\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"participantLimit\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"requestModeration\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"title\");\r",
									"});\r",
									"\r",
									"// Проверка значений некоторых полей\r",
									"pm.test(\"Check specific field values\", function () {\r",
									"    pm.expect(jsonResponse.annotation).to.eql(\"Газманов лучший из старой школы\");\r",
									"    pm.expect(jsonResponse.category.id).to.eql(3);\r",
									"    pm.expect(jsonResponse.description).to.eql(\"Концерт Газманова похож на полет. На спокойной песне — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа от него. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\");\r",
									"    pm.expect(jsonResponse.eventDate).to.eql(\"2024-05-09 15:10:05\");\r",
									"    pm.expect(jsonResponse.location.lat).to.eql(55.4515);\r",
									"    pm.expect(jsonResponse.location.lon).to.eql(37.37);\r",
									"    pm.expect(jsonResponse.paid).to.eql(false);\r",
									"    pm.expect(jsonResponse.participantLimit).to.eql(100);\r",
									"    pm.expect(jsonResponse.requestModeration).to.eql(false);\r",
									"    pm.expect(jsonResponse.title).to.eql(\"Концерт Газманова\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"annotation\": \"Газманов лучший из старой школы\",\r\n  \"category\": 3,\r\n  \"description\": \"Концерт Газманова похож на полет. На спокойной песне — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа от него. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n  \"eventDate\": \"2024-05-09 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.4515,\r\n    \"lon\": 37.37\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 100,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Концерт Газманова\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/users/1/events",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"users",
								"1",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 3 event for 3 user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Проверка структуры ответа\r",
									"let jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has all required fields\", function () {\r",
									"    pm.expect(jsonResponse).to.have.property(\"id\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"annotation\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"category\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"confirmedRequests\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"createdOn\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"description\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"eventDate\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"initiator\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"location\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"paid\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"participantLimit\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"publishedOn\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"requestModeration\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"state\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"title\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"views\");\r",
									"});\r",
									"\r",
									"// Проверка значений некоторых полей\r",
									"pm.test(\"Check specific field values\", function () {\r",
									"    pm.expect(jsonResponse.id).to.eql(3);\r",
									"    pm.expect(jsonResponse.annotation).to.eql(\"Параглайдинг 680 метров над уровнем моря\");\r",
									"    pm.expect(jsonResponse.category.id).to.eql(1);\r",
									"    pm.expect(jsonResponse.category.name).to.eql(\"Активный отдых\");\r",
									"    pm.expect(jsonResponse.eventDate).to.eql(\"2024-07-01 12:07:00\");\r",
									"    pm.expect(jsonResponse.initiator.id).to.eql(3);\r",
									"    pm.expect(jsonResponse.initiator.name).to.eql(\"User #2\");\r",
									"    pm.expect(jsonResponse.initiator.email).to.eql(\"user2@user.com\");\r",
									"    pm.expect(jsonResponse.location.lat).to.eql(36.576313);\r",
									"    pm.expect(jsonResponse.location.lon).to.eql(31.970913);\r",
									"    pm.expect(jsonResponse.paid).to.eql(true);\r",
									"    pm.expect(jsonResponse.participantLimit).to.eql(10);\r",
									"    pm.expect(jsonResponse.requestModeration).to.eql(false);\r",
									"    pm.expect(jsonResponse.title).to.eql(\"Параглайдинг с парашютом\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"annotation\": \"Параглайдинг 680 метров над уровнем моря\",\r\n  \"category\": 1,\r\n  \"description\": \"Почти прыжок с парашютом вместе с инструктором над прекрасным городом Алания. \",\r\n  \"eventDate\": \"2024-07-01 12:07:00\",\r\n  \"location\": {\r\n    \"lat\": 36.576312,\r\n    \"lon\": 31.970913\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Параглайдинг с парашютом\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/users/3/events",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"users",
								"3",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get event 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка статуса ответа\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Проверка структуры ответа\r",
									"let jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Response is an array and has all required fields\", function () {\r",
									"    pm.expect(jsonResponse).to.be.an(\"array\");\r",
									"    pm.expect(jsonResponse.length).to.be.at.least(1);\r",
									"    \r",
									"    jsonResponse.forEach(event => {\r",
									"        pm.expect(event).to.have.property(\"id\");\r",
									"        pm.expect(event).to.have.property(\"annotation\");\r",
									"        pm.expect(event).to.have.property(\"category\");\r",
									"        pm.expect(event).to.have.property(\"confirmedRequests\");\r",
									"        pm.expect(event).to.have.property(\"createdOn\");\r",
									"        pm.expect(event).to.have.property(\"description\");\r",
									"        pm.expect(event).to.have.property(\"eventDate\");\r",
									"        pm.expect(event).to.have.property(\"initiator\");\r",
									"        pm.expect(event).to.have.property(\"location\");\r",
									"        pm.expect(event).to.have.property(\"paid\");\r",
									"        pm.expect(event).to.have.property(\"participantLimit\");\r",
									"        pm.expect(event).to.have.property(\"publishedOn\");\r",
									"        pm.expect(event).to.have.property(\"requestModeration\");\r",
									"        pm.expect(event).to.have.property(\"state\");\r",
									"        pm.expect(event).to.have.property(\"title\");\r",
									"        pm.expect(event).to.have.property(\"views\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// Проверка значений некоторых полей для первого объекта\r",
									"let firstEvent = jsonResponse[0];\r",
									"\r",
									"pm.test(\"Check specific field values for the first event\", function () {\r",
									"    pm.expect(firstEvent.id).to.eql(1);\r",
									"    pm.expect(firstEvent.annotation).to.eql(\"Сплав на байдарках похож на полет.\");\r",
									"    pm.expect(firstEvent.category.id).to.eql(1);\r",
									"    pm.expect(firstEvent.category.name).to.eql(\"Активный отдых\");\r",
									"    pm.expect(firstEvent.description).to.eql(\"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\");\r",
									"    pm.expect(firstEvent.eventDate).to.eql(\"2024-12-31 15:10:05\");\r",
									"    pm.expect(firstEvent.initiator.id).to.eql(1);\r",
									"    pm.expect(firstEvent.initiator.name).to.eql(\"User #1\");\r",
									"    pm.expect(firstEvent.initiator.email).to.eql(\"user@user.com\");\r",
									"    pm.expect(firstEvent.location.lat).to.eql(55.754166);\r",
									"    pm.expect(firstEvent.location.lon).to.eql(37.62);\r",
									"    pm.expect(firstEvent.paid).to.eql(true);\r",
									"    pm.expect(firstEvent.participantLimit).to.eql(10);\r",
									"    pm.expect(firstEvent.requestModeration).to.eql(false);\r",
									"    pm.expect(firstEvent.title).to.eql(\"Сплав на байдарках\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{localhost}}/users/1/events",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"users",
								"1",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get event 1 for owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка статуса ответа\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Проверка структуры ответа\r",
									"let jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has all required fields\", function () {\r",
									"    pm.expect(jsonResponse).to.have.property(\"id\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"annotation\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"category\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"confirmedRequests\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"createdOn\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"description\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"eventDate\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"initiator\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"location\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"paid\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"participantLimit\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"publishedOn\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"requestModeration\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"state\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"title\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"views\");\r",
									"});\r",
									"\r",
									"// Проверка значений некоторых полей\r",
									"pm.test(\"Check specific field values\", function () {\r",
									"    pm.expect(jsonResponse.id).to.eql(1);\r",
									"    pm.expect(jsonResponse.annotation).to.eql(\"Сплав на байдарках похож на полет.\");\r",
									"    pm.expect(jsonResponse.category.id).to.eql(1);\r",
									"    pm.expect(jsonResponse.category.name).to.eql(\"Активный отдых\");\r",
									"    pm.expect(jsonResponse.initiator.id).to.eql(1);\r",
									"    pm.expect(jsonResponse.initiator.name).to.eql(\"User #1\");\r",
									"    pm.expect(jsonResponse.initiator.email).to.eql(\"user@user.com\");\r",
									"    pm.expect(jsonResponse.location.lat).to.eql(55.754166);\r",
									"    pm.expect(jsonResponse.location.lon).to.eql(37.62);\r",
									"    pm.expect(jsonResponse.paid).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{localhost}}/users/1/events/1",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch event 1 for owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка статуса ответа\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Проверка структуры ответа\r",
									"let jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has all required fields\", function () {\r",
									"    pm.expect(jsonResponse).to.have.property(\"id\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"annotation\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"category\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"confirmedRequests\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"createdOn\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"description\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"eventDate\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"initiator\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"location\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"paid\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"participantLimit\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"publishedOn\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"requestModeration\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"state\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"title\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"views\");\r",
									"});\r",
									"\r",
									"// Проверка значений некоторых полей\r",
									"pm.test(\"Check specific field values\", function () {\r",
									"    pm.expect(jsonResponse.id).to.eql(1);\r",
									"    pm.expect(jsonResponse.annotation).to.eql(\"Сплав на саппах похож на полет.\");\r",
									"    pm.expect(jsonResponse.category.id).to.eql(1);\r",
									"    pm.expect(jsonResponse.category.name).to.eql(\"Активный отдых\");\r",
									"    pm.expect(jsonResponse.initiator.id).to.eql(1);\r",
									"    pm.expect(jsonResponse.initiator.name).to.eql(\"User #1\");\r",
									"    pm.expect(jsonResponse.initiator.email).to.eql(\"user@user.com\");\r",
									"    pm.expect(jsonResponse.location.lat).to.eql(55.754166);\r",
									"    pm.expect(jsonResponse.location.lon).to.eql(37.62);\r",
									"    pm.expect(jsonResponse.paid).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"annotation\": \"Сплав на саппах похож на полет.\",\r\n  \"category\": 1,\r\n  \"description\": \"Сплав на саппах похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n  \"eventDate\": \"2024-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 15,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Сплав на саппах\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/users/1/events/1",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin get all events only 1 category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array with length of 2\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{localhost}}/admin/events?categories=1&rangeStart=2000-01-01 20:00:00&rangeEnd=2030-01-01 20:00:00&from=0&size=10",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"admin",
								"events"
							],
							"query": [
								{
									"key": "categories",
									"value": "1"
								},
								{
									"key": "rangeStart",
									"value": "2000-01-01 20:00:00"
								},
								{
									"key": "rangeEnd",
									"value": "2030-01-01 20:00:00"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch event 1 for admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка статуса ответа\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Проверка структуры ответа\r",
									"let jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has all required fields\", function () {\r",
									"    pm.expect(jsonResponse).to.have.property(\"id\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"annotation\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"category\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"confirmedRequests\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"createdOn\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"description\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"eventDate\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"initiator\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"location\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"paid\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"participantLimit\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"publishedOn\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"requestModeration\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"state\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"title\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"views\");\r",
									"});\r",
									"\r",
									"// Проверка значений некоторых полей\r",
									"pm.test(\"Check specific field values\", function () {\r",
									"    pm.expect(jsonResponse.id).to.eql(1);\r",
									"    pm.expect(jsonResponse.annotation).to.eql(\"Сплав на саппах похож на полет.\");\r",
									"    pm.expect(jsonResponse.category.id).to.eql(1);\r",
									"    pm.expect(jsonResponse.category.name).to.eql(\"Активный отдых\");\r",
									"    pm.expect(jsonResponse.initiator.id).to.eql(1);\r",
									"    pm.expect(jsonResponse.initiator.name).to.eql(\"User #1\");\r",
									"    pm.expect(jsonResponse.initiator.email).to.eql(\"user@user.com\");\r",
									"    pm.expect(jsonResponse.location.lat).to.eql(55.754166);\r",
									"    pm.expect(jsonResponse.location.lon).to.eql(37.62);\r",
									"    pm.expect(jsonResponse.paid).to.eql(true);\r",
									"    pm.expect(jsonResponse.state).to.eql(\"PUBLISHED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"annotation\": \"Сплав на саппах похож на полет.\",\r\n  \"category\": 1,\r\n  \"description\": \"Сплав на саппах похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n  \"eventDate\": \"2024-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 15,\r\n  \"requestModeration\": false,\r\n  \"stateAction\": \"PUBLISH_EVENT\",\r\n  \"title\": \"Сплав на саппах\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/admin/events/1",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"admin",
								"events",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all events only 1 category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка статуса ответа\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Проверка структуры ответа\r",
									"let jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Response is an array and has all required fields\", function () {\r",
									"    pm.expect(jsonResponse).to.be.an(\"array\");\r",
									"    pm.expect(jsonResponse.length).to.be.at.least(1);\r",
									"    \r",
									"    jsonResponse.forEach(event => {\r",
									"        pm.expect(event).to.have.property(\"id\");\r",
									"        pm.expect(event).to.have.property(\"annotation\");\r",
									"        pm.expect(event).to.have.property(\"category\");\r",
									"        pm.expect(event).to.have.property(\"confirmedRequests\");\r",
									"        pm.expect(event).to.have.property(\"createdOn\");\r",
									"        pm.expect(event).to.have.property(\"description\");\r",
									"        pm.expect(event).to.have.property(\"eventDate\");\r",
									"        pm.expect(event).to.have.property(\"initiator\");\r",
									"        pm.expect(event).to.have.property(\"location\");\r",
									"        pm.expect(event).to.have.property(\"paid\");\r",
									"        pm.expect(event).to.have.property(\"participantLimit\");\r",
									"        pm.expect(event).to.have.property(\"publishedOn\");\r",
									"        pm.expect(event).to.have.property(\"requestModeration\");\r",
									"        pm.expect(event).to.have.property(\"state\");\r",
									"        pm.expect(event).to.have.property(\"title\");\r",
									"        pm.expect(event).to.have.property(\"views\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// Проверка значений некоторых полей для первого объекта\r",
									"let firstEvent = jsonResponse[0];\r",
									"\r",
									"pm.test(\"Check specific field values for the first event\", function () {\r",
									"    pm.expect(firstEvent.id).to.eql(1);\r",
									"    pm.expect(firstEvent.annotation).to.eql(\"Сплав на саппах похож на полет.\");\r",
									"    pm.expect(firstEvent.category.id).to.eql(1);\r",
									"    pm.expect(firstEvent.category.name).to.eql(\"Активный отдых\");\r",
									"    pm.expect(firstEvent.description).to.eql(\"Сплав на саппах похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\");\r",
									"    pm.expect(firstEvent.eventDate).to.eql(\"2024-12-31 15:10:05\");\r",
									"    pm.expect(firstEvent.initiator.id).to.eql(1);\r",
									"    pm.expect(firstEvent.initiator.name).to.eql(\"User #1\");\r",
									"    pm.expect(firstEvent.initiator.email).to.eql(\"user@user.com\");\r",
									"    pm.expect(firstEvent.location.lat).to.eql(55.754166);\r",
									"    pm.expect(firstEvent.location.lon).to.eql(37.62);\r",
									"    pm.expect(firstEvent.paid).to.eql(true);\r",
									"    pm.expect(firstEvent.participantLimit).to.eql(15);\r",
									"    pm.expect(firstEvent.requestModeration).to.eql(false);\r",
									"    pm.expect(firstEvent.title).to.eql(\"Сплав на саппах\");\r",
									"    pm.expect(firstEvent.state).to.eql(\"PUBLISHED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{localhost}}/events?categories=1&onlyAvailable=false&from=0&size=10",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "categories",
									"value": "1"
								},
								{
									"key": "onlyAvailable",
									"value": "false"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get 1 event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка статуса ответа\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Проверка структуры ответа\r",
									"let jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has all required fields\", function () {\r",
									"    pm.expect(jsonResponse).to.have.property(\"id\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"annotation\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"category\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"confirmedRequests\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"createdOn\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"description\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"eventDate\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"initiator\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"location\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"paid\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"participantLimit\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"publishedOn\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"requestModeration\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"state\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"title\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"views\");\r",
									"});\r",
									"\r",
									"// Проверка значений некоторых полей\r",
									"pm.test(\"Check specific field values\", function () {\r",
									"    pm.expect(jsonResponse.id).to.eql(1);\r",
									"    pm.expect(jsonResponse.annotation).to.eql(\"Сплав на саппах похож на полет.\");\r",
									"    pm.expect(jsonResponse.category.id).to.eql(1);\r",
									"    pm.expect(jsonResponse.category.name).to.eql(\"Активный отдых\");\r",
									"    pm.expect(jsonResponse.initiator.id).to.eql(1);\r",
									"    pm.expect(jsonResponse.initiator.name).to.eql(\"User #1\");\r",
									"    pm.expect(jsonResponse.initiator.email).to.eql(\"user@user.com\");\r",
									"    pm.expect(jsonResponse.location.lat).to.eql(55.754166);\r",
									"    pm.expect(jsonResponse.location.lon).to.eql(37.62);\r",
									"    pm.expect(jsonResponse.paid).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{localhost}}/events/1",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"events",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "requests",
			"item": [
				{
					"name": "Post request 1 for 3 event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Проверка структуры ответа\r",
									"let jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has all required fields\", function () {\r",
									"    pm.expect(jsonResponse).to.have.property(\"id\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"created\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"event\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"requester\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"status\");\r",
									"});\r",
									"\r",
									"// Проверка значений некоторых полей\r",
									"pm.test(\"Check specific field values\", function () {\r",
									"    pm.expect(jsonResponse.id).to.eql(1);\r",
									"    pm.expect(jsonResponse.event).to.eql(1);\r",
									"    pm.expect(jsonResponse.requester).to.eql(3);\r",
									"    pm.expect(jsonResponse.status).to.eql(\"PENDING\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{localhost}}/users/3/requests?eventId=1",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"users",
								"3",
								"requests"
							],
							"query": [
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin user 4 create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"The id should be equal to 5\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.id).to.equal(5);",
									"});",
									"",
									"",
									"pm.test(\"Name should be equal to 'User #4'\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.name).to.equal(\"User #4\");",
									"});",
									"",
									"",
									"pm.test(\"Email is equal to 'user4@user.com'\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.email).to.equal(\"user4@user.com\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"User #4\",\r\n    \"email\": \"user4@user.com\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/admin/users",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post request 2 for 3 event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Проверка структуры ответа\r",
									"let jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has all required fields\", function () {\r",
									"    pm.expect(jsonResponse).to.have.property(\"id\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"created\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"event\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"requester\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"status\");\r",
									"});\r",
									"\r",
									"// Проверка значений некоторых полей\r",
									"pm.test(\"Check specific field values\", function () {\r",
									"    pm.expect(jsonResponse.id).to.eql(2);\r",
									"    pm.expect(jsonResponse.event).to.eql(1);\r",
									"    pm.expect(jsonResponse.requester).to.eql(5);\r",
									"    pm.expect(jsonResponse.status).to.eql(\"PENDING\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{localhost}}/users/5/requests?eventId=1",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"users",
								"5",
								"requests"
							],
							"query": [
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get requests for 3 user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"let jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Response is an array and has at least one item\", function () {\r",
									"    pm.expect(jsonResponse).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"// Проверка структуры первого элемента массива\r",
									"let firstItem = jsonResponse[0];\r",
									"\r",
									"pm.test(\"First item in array has all required fields\", function () {\r",
									"    pm.expect(firstItem).to.have.property(\"id\");\r",
									"    pm.expect(firstItem).to.have.property(\"created\");\r",
									"    pm.expect(firstItem).to.have.property(\"event\");\r",
									"    pm.expect(firstItem).to.have.property(\"requester\");\r",
									"    pm.expect(firstItem).to.have.property(\"status\");\r",
									"});\r",
									"\r",
									"// Проверка значений некоторых полей первого элемента массива\r",
									"pm.test(\"Check specific field values of the first item\", function () {\r",
									"    pm.expect(firstItem.id).to.eql(1);\r",
									"    pm.expect(firstItem.event).to.eql(1);\r",
									"    pm.expect(firstItem.requester).to.eql(3);\r",
									"    pm.expect(firstItem.status).to.eql(\"PENDING\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{localhost}}/users/3/requests",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"users",
								"3",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all requests for owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Проверка структуры ответа\r",
									"let jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Response is an array and has two items\", function () {\r",
									"    pm.expect(jsonResponse).to.be.an(\"array\").that.has.lengthOf(2);\r",
									"});\r",
									"\r",
									"// Проверка структуры каждого элемента массива\r",
									"jsonResponse.forEach((item, index) => {\r",
									"    pm.test(`Item #${index + 1} has all required fields`, function () {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"created\");\r",
									"        pm.expect(item).to.have.property(\"event\");\r",
									"        pm.expect(item).to.have.property(\"requester\");\r",
									"        pm.expect(item).to.have.property(\"status\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// Проверка значений некоторых полей первого элемента массива\r",
									"let firstItem = jsonResponse[0];\r",
									"\r",
									"pm.test(\"Check specific field values of the first item\", function () {\r",
									"    pm.expect(firstItem.id).to.eql(1);\r",
									"    pm.expect(firstItem.event).to.eql(1);\r",
									"    pm.expect(firstItem.requester).to.eql(3);\r",
									"    pm.expect(firstItem.status).to.eql(\"PENDING\");\r",
									"});\r",
									"\r",
									"// Проверка значений некоторых полей второго элемента массива\r",
									"let secondItem = jsonResponse[1];\r",
									"\r",
									"pm.test(\"Check specific field values of the second item\", function () {\r",
									"    pm.expect(secondItem.id).to.eql(2);\r",
									"    pm.expect(secondItem.event).to.eql(1);\r",
									"    pm.expect(secondItem.requester).to.eql(5);\r",
									"    pm.expect(secondItem.status).to.eql(\"PENDING\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{localhost}}/users/1/events/1/requests",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"1",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confrimed request for owner 1 event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Проверка структуры ответа\r",
									"let jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has 'confirmedRequests' and 'rejectedRequests' arrays\", function () {\r",
									"    pm.expect(jsonResponse).to.have.property(\"confirmedRequests\").that.is.an(\"array\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"rejectedRequests\").that.is.an(\"array\");\r",
									"});\r",
									"\r",
									"// Проверка структуры каждого элемента в 'confirmedRequests'\r",
									"jsonResponse.confirmedRequests.forEach((item, index) => {\r",
									"    pm.test(`Item #${index + 1} in 'confirmedRequests' has all required fields`, function () {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"created\");\r",
									"        pm.expect(item).to.have.property(\"event\");\r",
									"        pm.expect(item).to.have.property(\"requester\");\r",
									"        pm.expect(item).to.have.property(\"status\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// Проверка значений некоторых полей первого элемента в 'confirmedRequests'\r",
									"let firstConfirmedRequest = jsonResponse.confirmedRequests[0];\r",
									"\r",
									"pm.test(\"Check specific field values of the first item in 'confirmedRequests'\", function () {\r",
									"    pm.expect(firstConfirmedRequest.id).to.eql(1);\r",
									"    pm.expect(firstConfirmedRequest.event).to.eql(1);\r",
									"    pm.expect(firstConfirmedRequest.requester).to.eql(3);\r",
									"    pm.expect(firstConfirmedRequest.status).to.eql(\"CONFIRMED\");\r",
									"});\r",
									"\r",
									"// Проверка, что 'rejectedRequests' пуст\r",
									"pm.test(\"'rejectedRequests' is empty\", function () {\r",
									"    pm.expect(jsonResponse.rejectedRequests).to.be.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"requestIds\": [\r\n    1\r\n  ],\r\n  \"status\": \"CONFIRMED\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/users/1/events/1/requests",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"1",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reject request for owner 1 event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Проверка структуры ответа\r",
									"let jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has 'confirmedRequests' and 'rejectedRequests' arrays\", function () {\r",
									"    pm.expect(jsonResponse).to.have.property(\"confirmedRequests\").that.is.an(\"array\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"rejectedRequests\").that.is.an(\"array\");\r",
									"});\r",
									"\r",
									"// Проверка структуры каждого элемента в 'confirmedRequests'\r",
									"jsonResponse.confirmedRequests.forEach((item, index) => {\r",
									"    pm.test(`Item #${index + 1} in 'confirmedRequests' has all required fields`, function () {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"created\");\r",
									"        pm.expect(item).to.have.property(\"event\");\r",
									"        pm.expect(item).to.have.property(\"requester\");\r",
									"        pm.expect(item).to.have.property(\"status\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// Проверка структуры каждого элемента в 'rejectedRequests'\r",
									"jsonResponse.rejectedRequests.forEach((item, index) => {\r",
									"    pm.test(`Item #${index + 1} in 'rejectedRequests' has all required fields`, function () {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"created\");\r",
									"        pm.expect(item).to.have.property(\"event\");\r",
									"        pm.expect(item).to.have.property(\"requester\");\r",
									"        pm.expect(item).to.have.property(\"status\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// Проверка значений некоторых полей первого элемента в 'confirmedRequests'\r",
									"let firstConfirmedRequest = jsonResponse.confirmedRequests[0];\r",
									"\r",
									"pm.test(\"Check specific field values of the first item in 'confirmedRequests'\", function () {\r",
									"    pm.expect(firstConfirmedRequest.id).to.eql(1);\r",
									"    pm.expect(firstConfirmedRequest.event).to.eql(1);\r",
									"    pm.expect(firstConfirmedRequest.requester).to.eql(3);\r",
									"    pm.expect(firstConfirmedRequest.status).to.eql(\"CONFIRMED\");\r",
									"});\r",
									"\r",
									"// Проверка значений некоторых полей первого элемента в 'rejectedRequests'\r",
									"let firstRejectedRequest = jsonResponse.rejectedRequests[0];\r",
									"\r",
									"pm.test(\"Check specific field values of the first item in 'rejectedRequests'\", function () {\r",
									"    pm.expect(firstRejectedRequest.id).to.eql(2);\r",
									"    pm.expect(firstRejectedRequest.event).to.eql(1);\r",
									"    pm.expect(firstRejectedRequest.requester).to.eql(5);\r",
									"    pm.expect(firstRejectedRequest.status).to.eql(\"CANCELLED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"requestIds\": [\r\n    2\r\n  ],\r\n  \"status\": \"CANCELLED\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/users/1/events/1/requests",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"1",
								"requests"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "compilations",
			"item": [
				{
					"name": "Post compilations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Проверка структуры ответа\r",
									"let jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has 'id', 'events', 'pinned', and 'title'\", function () {\r",
									"    pm.expect(jsonResponse).to.have.property(\"id\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"events\").that.is.an(\"array\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"pinned\").that.is.a(\"boolean\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"title\").that.is.a(\"string\");\r",
									"});\r",
									"\r",
									"// Проверка структуры каждого элемента в 'events'\r",
									"jsonResponse.events.forEach((event, index) => {\r",
									"    pm.test(`Event #${index + 1} has 'id', 'annotation', 'category', and 'initiator'`, function () {\r",
									"        pm.expect(event).to.have.property(\"id\");\r",
									"        pm.expect(event).to.have.property(\"annotation\");\r",
									"        pm.expect(event).to.have.property(\"category\").that.is.an(\"object\");\r",
									"        pm.expect(event.category).to.have.property(\"id\");\r",
									"        pm.expect(event.category).to.have.property(\"name\");\r",
									"        pm.expect(event).to.have.property(\"initiator\").that.is.an(\"object\");\r",
									"        pm.expect(event.initiator).to.have.property(\"id\");\r",
									"        pm.expect(event.initiator).to.have.property(\"name\");\r",
									"        pm.expect(event.initiator).to.have.property(\"email\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// Проверка значений некоторых полей\r",
									"pm.test(\"Check specific field values\", function () {\r",
									"    pm.expect(jsonResponse.id).to.eql(1);\r",
									"    pm.expect(jsonResponse.pinned).to.eql(false);\r",
									"    pm.expect(jsonResponse.title).to.eql(\"Очень активный отдых\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"events\": [\r\n    1,\r\n    3\r\n  ],\r\n  \"pinned\": false,\r\n  \"title\": \"Очень активный отдых\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/admin/compilations",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"admin",
								"compilations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch compilations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Проверка структуры ответа\r",
									"let jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has 'id', 'events', 'pinned', and 'title'\", function () {\r",
									"    pm.expect(jsonResponse).to.have.property(\"id\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"events\").that.is.an(\"array\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"pinned\").that.is.a(\"boolean\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"title\").that.is.a(\"string\");\r",
									"});\r",
									"\r",
									"// Проверка структуры каждого элемента в 'events'\r",
									"jsonResponse.events.forEach((event, index) => {\r",
									"    pm.test(`Event #${index + 1} has 'id', 'annotation', 'category', and 'initiator'`, function () {\r",
									"        pm.expect(event).to.have.property(\"id\");\r",
									"        pm.expect(event).to.have.property(\"annotation\");\r",
									"        pm.expect(event).to.have.property(\"category\").that.is.an(\"object\");\r",
									"        pm.expect(event.category).to.have.property(\"id\");\r",
									"        pm.expect(event.category).to.have.property(\"name\");\r",
									"        pm.expect(event).to.have.property(\"initiator\").that.is.an(\"object\");\r",
									"        pm.expect(event.initiator).to.have.property(\"id\");\r",
									"        pm.expect(event.initiator).to.have.property(\"name\");\r",
									"        pm.expect(event.initiator).to.have.property(\"email\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// Проверка значений некоторых полей\r",
									"pm.test(\"Check specific field values\", function () {\r",
									"    pm.expect(jsonResponse.id).to.eql(1);\r",
									"    pm.expect(jsonResponse.pinned).to.eql(false);\r",
									"    pm.expect(jsonResponse.title).to.eql(\"А может и не очень активный отдых\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"events\": [\r\n      1,\r\n      3\r\n  ],\r\n  \"pinned\": false,\r\n  \"title\": \"А может и не очень активный отдых\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/admin/compilations/1",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"admin",
								"compilations",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post compilations 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"let jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has 'id', 'events', 'pinned', and 'title'\", function () {\r",
									"    pm.expect(jsonResponse).to.have.property(\"id\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"events\").that.is.an(\"array\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"pinned\").that.is.a(\"boolean\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"title\").that.is.a(\"string\");\r",
									"});\r",
									"\r",
									"// Проверка структуры каждого элемента в 'events'\r",
									"jsonResponse.events.forEach((event, index) => {\r",
									"    pm.test(`Event #${index + 1} has 'id', 'annotation', 'category', and 'initiator'`, function () {\r",
									"        pm.expect(event).to.have.property(\"id\");\r",
									"        pm.expect(event).to.have.property(\"annotation\");\r",
									"        pm.expect(event).to.have.property(\"category\").that.is.an(\"object\");\r",
									"        pm.expect(event.category).to.have.property(\"id\");\r",
									"        pm.expect(event.category).to.have.property(\"name\");\r",
									"        pm.expect(event).to.have.property(\"initiator\").that.is.an(\"object\");\r",
									"        pm.expect(event.initiator).to.have.property(\"id\");\r",
									"        pm.expect(event.initiator).to.have.property(\"name\");\r",
									"        pm.expect(event.initiator).to.have.property(\"email\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// Проверка значений некоторых полей\r",
									"pm.test(\"Check specific field values\", function () {\r",
									"    pm.expect(jsonResponse.id).to.eql(2);\r",
									"    pm.expect(jsonResponse.pinned).to.eql(true);\r",
									"    pm.expect(jsonResponse.title).to.eql(\"Лучшие концерты на Земле!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"events\": [\r\n    2\r\n  ],\r\n  \"pinned\": true,\r\n  \"title\": \"Лучшие концерты на Земле!\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/admin/compilations",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"admin",
								"compilations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete compilations 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{localhost}}/admin/compilations/2",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"admin",
								"compilations",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all compilations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response contains correct data\", function () {\r",
									"    // Проверка первого объекта\r",
									"    const firstEvent = jsonData[0];\r",
									"    pm.expect(firstEvent.id).to.eql(1);\r",
									"    pm.expect(firstEvent.pinned).to.eql(false);\r",
									"    pm.expect(firstEvent.title).to.eql(\"А может и не очень активный отдых\");\r",
									"    \r",
									"    const firstEventDetails = firstEvent.events[0];\r",
									"    pm.expect(firstEventDetails.id).to.eql(1);\r",
									"    pm.expect(firstEventDetails.annotation).to.eql(\"Сплав на саппах похож на полет.\");\r",
									"    pm.expect(firstEventDetails.category.id).to.eql(1);\r",
									"    pm.expect(firstEventDetails.category.name).to.eql(\"Активный отдых\");\r",
									"    pm.expect(firstEventDetails.confirmedRequests).to.eql(null);\r",
									"    pm.expect(firstEventDetails.description).to.eql(\"Сплав на саппах похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\");\r",
									"    pm.expect(firstEventDetails.lat).to.eql(55.754166);\r",
									"    pm.expect(firstEventDetails.lon).to.eql(37.62);\r",
									"    pm.expect(firstEventDetails.paid).to.eql(true);\r",
									"    pm.expect(firstEventDetails.participantLimit).to.eql(15);\r",
									"    pm.expect(firstEventDetails.requestModeration).to.eql(false);\r",
									"    pm.expect(firstEventDetails.state).to.eql(\"PUBLISHED\");\r",
									"    pm.expect(firstEventDetails.title).to.eql(\"Сплав на саппах\");\r",
									"    pm.expect(firstEventDetails.views).to.eql(1);\r",
									"    pm.expect(firstEventDetails.initiator.id).to.eql(1);\r",
									"    pm.expect(firstEventDetails.initiator.name).to.eql(\"User #1\");\r",
									"    pm.expect(firstEventDetails.initiator.email).to.eql(\"user@user.com\");\r",
									"    \r",
									"    // Проверка второго объекта (только некоторые поля)\r",
									"    const secondEventDetails = firstEvent.events[1];\r",
									"    pm.expect(secondEventDetails.id).to.eql(3);\r",
									"    pm.expect(secondEventDetails.annotation).to.eql(\"Параглайдинг 680 метров над уровнем моря\");\r",
									"    pm.expect(secondEventDetails.category.id).to.eql(1);\r",
									"    pm.expect(secondEventDetails.category.name).to.eql(\"Активный отдых\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{localhost}}/compilations",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"compilations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get compilation 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Проверка структуры ответа\r",
									"let jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has 'id', 'events', 'pinned', and 'title'\", function () {\r",
									"    pm.expect(jsonResponse).to.have.property(\"id\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"events\").that.is.an(\"array\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"pinned\").that.is.a(\"boolean\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"title\").that.is.a(\"string\");\r",
									"});\r",
									"\r",
									"// Проверка структуры каждого элемента в 'events'\r",
									"jsonResponse.events.forEach((event, index) => {\r",
									"    pm.test(`Event #${index + 1} has 'id', 'annotation', 'category', and 'initiator'`, function () {\r",
									"        pm.expect(event).to.have.property(\"id\");\r",
									"        pm.expect(event).to.have.property(\"annotation\");\r",
									"        pm.expect(event).to.have.property(\"category\").that.is.an(\"object\");\r",
									"        pm.expect(event.category).to.have.property(\"id\");\r",
									"        pm.expect(event.category).to.have.property(\"name\");\r",
									"        pm.expect(event).to.have.property(\"initiator\").that.is.an(\"object\");\r",
									"        pm.expect(event.initiator).to.have.property(\"id\");\r",
									"        pm.expect(event.initiator).to.have.property(\"name\");\r",
									"        pm.expect(event.initiator).to.have.property(\"email\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// Проверка значений некоторых полей\r",
									"pm.test(\"Check specific field values\", function () {\r",
									"    pm.expect(jsonResponse.id).to.eql(1);\r",
									"    pm.expect(jsonResponse.pinned).to.eql(false);\r",
									"    pm.expect(jsonResponse.title).to.eql(\"А может и не очень активный отдых\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{localhost}}/compilations/1",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"compilations",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "statistic",
			"item": [
				{
					"name": "Get statistic only time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{localserver}}/stats?start=2000-09-01 00:00:00&end=2032-09-30 00:00:00",
							"host": [
								"{{localserver}}"
							],
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "start",
									"value": "2000-09-01 00:00:00"
								},
								{
									"key": "end",
									"value": "2032-09-30 00:00:00"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get unique statistic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{localserver}}/stats?start=2000-09-01 00:00:00&end=2032-09-30 00:00:00&unique=true",
							"host": [
								"{{localserver}}"
							],
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "start",
									"value": "2000-09-01 00:00:00"
								},
								{
									"key": "end",
									"value": "2032-09-30 00:00:00"
								},
								{
									"key": "unique",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "localhost",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "localserver",
			"value": "http://localhost:9090",
			"type": "string"
		}
	]
}